@model BlockCreateVm
@{
    ViewData["Title"] = "Create Block";
}
    
<div class="form-wrapper">
    <h1 class="form-title">New Block</h1>
    <form asp-controller="Blocks" asp-action="Create">
        
        @await Component.InvokeAsync("BlockFormGroups", Model)

        @await Component.InvokeAsync("SubjectSelector", new {subjectId = Model.SubjectId})
        
        
        <div class="form-group" id="topics-form-group"  style="display: @(Model.SubjectId.HasValue ? "block" : "none");">
            <label asp-for="SelectedTopicIds" class="form-label">Topics</label>
            <select name="SelectedTopicIds" id="topics-select" class="form-control" multiple>

            </select>
        </div>

        <div class="form-group" id="tags-form-group"  style="display: @(Model.SubjectId.HasValue ? "block" : "none");">
            <label asp-for="SelectedTagIds" class="form-label">Tags</label>
            <select name="SelectedTagIds" id="tags-select" class="form-control" multiple>

            </select>
        </div>

        <div class="form-button-group">
            <input type="submit" value="Create" class="btn btn-primary" />
            <a asp-action="Index" class="btn btn-secondary">Cancel</a>
        </div>

    </form>
    
</div>



@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        $(document).ready(function() {
    
            // Handle subject selection change
            $('#subject-select').change(function() {
                var subjectId = $(this).val();
                if (subjectId) {
                    // Show topics and tags dropdown and empty
                
                    $('#topics-form-group').show();
                    $('#topics-select').empty()
                    $('#tags-form-group').show();
                    $('#tags-select').empty()
                    
                    // Load Topics
                    $.getJSON('@Url.Action("GetTopicsBySubject", "Topics")?subjectId=' + subjectId, function(topics) {

                        $.each(topics, function(index, topic) {
                            $('#topics-select').append($('<option></option>')
                                .attr('value', topic.value)
                                .text(topic.text));
                        });

                        
    
                        // Reselect any previously selected topics
                        const selectedTopics = @Html.Raw(Json.Serialize(Model.SelectedTopicIds));
                        $('#topics-select').val(selectedTopics);
    
                    });

                    $.getJSON('@Url.Action("GetTagsBySubject", "Tags")?subjectId=' + subjectId, function(tags) {
                        $.each(tags, function (index, tag) {
                            $('#tags-select').append($('<option></option>')
                                .attr('value', tag.value)
                                .text(tag.text));
                        });
                    });
                } else {
                    // Hide topic and tag dropdown if no subject is selected
                    $('#topics-form-group').hide();
                    $('#topics-select').empty()
                    $('#tags-form-group').hide();
                    $('#tags-select').empty()
                }
            });
        });
    </script>
}
